/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

static void *extend_heap(size_t words);//用一个新的空闲块扩展堆
static void *coalesce(void *bp) ;
/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "ateam",
    /* First member's full name */
    "Harry Bovik",
    /* First member's email address */
    "bovik@cs.cmu.edu",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)


#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))


/*基本常数和宏*/
/* Basic constants and macros */  
#define WSIZE 4     /* Word and header/footer size (bytes) */  
#define DSIZE 8     /* Double word size (bytes) */  
#define CHUNKSIZE (1<<12)     /* Extend heap by this amount (bytes) */  
  
#define MAX(x, y) ((x) > (y) ? (x) : (y))  
  
/* Pack a size and allocated bit into  word */  
#define PACK(size, alloc) ((size) | (alloc))  
  
/* Read and write a word at address p */  
#define GET(p) (*(unsigned int *)(p))  
#define PUT(p, val) (*(unsigned int *)(p) = (val))  
  
/* Read and write a pointer at address p */  
#define GET_PTR(p) ((unsigned int *)(long)(GET(p)))  
#define PUT_PTR(p, ptr) (*(unsigned int *)(p) = ((long)ptr))  
  
/* Read the size and allocated fields from address p */  
#define GET_SIZE(p) (GET(p) & ~0x7)  
#define GET_ALLOC(p) (GET(p) & 0x1)  
  
/* Given block ptr bp, compute address of its header and footer */  
#define HDRP(bp) ((char *)(bp) - WSIZE)  
#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)  
  
/* Given block ptr bp, compute address of next and previous blocks */  
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))  
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))  

/* Globe var */  
static char *heap_listp; 


/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{   
     if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1)
      return -1;
    PUT(heap_listp, 0);/* alignment padding */
    PUT(heap_listp+(1*WSIZE), PACK(DSIZE, 1));  /* prologue header */
    PUT(heap_listp+(2*WSIZE), PACK(DSIZE, 1));  /* prologue footer */
    PUT(heap_listp+(3*WSIZE), PACK(0, 1));   /* epilogue header */
    heap_listp += (2*WSIZE);
    //将对进行扩展
    if(extend_heap(CHUNKSIZE/WSIZE)==NULL)
        return -1;
    return 0;
}

/*用一个新的空闲块扩展堆*/
static void *extend_heap(size_t words)  
{  
    char *bp;  
    size_t size;  
  
    /* 向上取整最接近2字的倍数 */  
    size = (words % 2) ? ((words + 1) * WSIZE) : (words * WSIZE);  
    if ((long)(bp = mem_sbrk(size)) == -1) {  
        return NULL;  
    }  
  
    /* 更新空闲块的头、尾，？？*/  
    PUT(HDRP(bp), PACK(size, 0));       /* Free block header */  
    PUT(FTRP(bp), PACK(size, 0));       /* Free block footer */  
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));   /* New epilogue header */  
  
    /*合并两个空闲块，并返回合并以后的指针*/  
    return coalesce(bp);  
}  

/*空闲块的合并
传入参数：当前块的块指针
功能：使用边界标记合并把所有邻接空闲块在常数时间内合并*/
static void *coalesce(void *bp)  
{  
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));  
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));  
    size_t size = GET_SIZE(HDRP(bp));  
      
    if (prev_alloc && next_alloc) {
	/* 前后无空闲，不可进行合并，简单把块的状态改变：已分配->空闲 */       
        bp = bp;  
    } else if (prev_alloc && !next_alloc) {     
	/* 后空闲 */          	
	//delete_list(NEXT_BLKP(bp));  
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));  /*当前块和后面块的大小*/
        PUT(HDRP(bp), PACK(size, 0));/*更新当前块的头部*/  
        PUT(FTRP(bp), PACK(size, 0));  /*更新后面块的脚部*/
    } else if (!prev_alloc && next_alloc) {    
        //delete_list(PREV_BLKP(bp));  
	 /* 前空闲 */  
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));  
        PUT(FTRP(bp), PACK(size, 0));  /*更新当前块的脚部*/
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));  /*更新前面块的头部*/
        bp = PREV_BLKP(bp);  
    } else {                
        /* 前后均空闲 */  
        //delete_list(NEXT_BLKP(bp));  
        //delete_list(PREV_BLKP(bp));  
        size = size + GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(HDRP(NEXT_BLKP(bp)));  
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));  /*更新前面块的头部*/
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));  /*更新后面块的脚部*/
        bp = PREV_BLKP(bp);  
    }  
  
    //insert_list(bp);  
    return bp;  
}  

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
    int newsize = ALIGN(size + SIZE_T_SIZE);
    void *p = mem_sbrk(newsize);
    if (p == (void *)-1)
	return NULL;
    else {
        *(size_t *)p = size;
        return (void *)((char *)p + SIZE_T_SIZE);
    }
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{	
    size_t size = GET_SIZE(HDRP(ptr));  
    /*更新当前块的头部和脚部*/
    PUT(HDRP(ptr), PACK(size, 0));  
    PUT(FTRP(ptr), PACK(size, 0));  
    coalesce(ptr); /*邻接空闲块合并*/
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size);
    if (newptr == NULL)
      return NULL;
    copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
    if (size < copySize)
      copySize = size;
    memcpy(newptr, oldptr, copySize);
    mm_free(oldptr);
    return newptr;
}
